We have used our semantics to verify that protocols of real-world
distributed databases satisfy particular consistency models: for
example, the replicated database COPS \cite{cops} satisfies \(\CC\); and the
partitioned database Clock-SI \cite{clocksi} satisfies SI. These results
contrast with the results in the literature, which justify the
correctness of the implementations using definitions of consistency
model specific to the implementations.  We have also proved invariant
properties of clients: robustness properties of clients of the
single-counter, multi-counter and banking libraries; and a
mutual-exclusion property of a program pattern using a lock library
under \( \PSI \), even though it is not robust.  We thus believe that our
semantics provides an interesting \emph{mid-point} between distributed
implementations and clients.  We plan to validate further the
usefulness of our semantics by: verifying other well-known protocols
of distributed databases \cite{ramp,redblue,eiger,wren}; exploring
robustness results for OLTP workloads such as TPC-C \cite{tpcc} and
RUBiS \cite{rubis}; and exploring other program analysis techniques
such as transaction chopping \cite{psi-chopping,chopping}, invariant
checking \cite{cise,repliss} and program logics \cite{alonetogether}.
We also plan to develop tools to generate litmus tests for
implementations and to analyse client programs.
