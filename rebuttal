Atomic visibility:
We mainly target models for distributed databases instead of transitional relational DBs,
so we made assumption of atomic visibility.
Yet we think it is worth to explore to weaken such assumption 
and put atomic visibility as an execution test in the future.
Why another framework:
We want to do program analysis and verify protocols under the same framework.
In term of program analysis, an operational model allows to do dynamic program analysis; 
for example, here we check robustness on the invariant derived from traces of programs.
To verify protocol, especially protocols of distributed databases, 
with a state-based operational semantics,
it is easy to link replica states to our abstract centralised state 
and link internal operations of replicas to construction of views that satisfy execution test.
I/O automata: ------- 
        It is an automata whose states are labelled with input/output/external; 
        they also have some notion of composition of automata.
        So I feel an automata likes a transaction, 
        and the composition likes our semantics over kv-store???
All the books about DB: -------- cannot find a copy in our library nor pirate online.
MW and WFR from the third reviewer:
A view in our framework corresponds to the visibility relation for the next transaction.
Our definition of MW, namely enforcing views are closed with respect to SO,
matches the definition from Sivaramakrishnan et al, namely SO ; VIS ==> VIS.
Our WFR definition is inspired by VIS; SO? ; VIS  ==> VIS.
Yet we found out it is enough to say WR; SO? ; VIS ==> VIS and 
WR can be easily computed from the kv-store.
Thus, our WFR definition enforces views are closed with respect to WR; SO?.
Our four session guarantee definitions are closely related to Sivaramakrishnan et al.
------ dont know how to say Burckhardt et al. 2014 one
The third reviewer mentioned eventual consistency: ----------
[28] suresh concur, how much different: ----------
Realistic of conditions of compositionality: ------
=============
Few minor points:
The notation SO^? means the reflexive closure of the session order SO.
The notation \xrighthookarrow{fin} means partial finite function.
RYW definition is not a typos, since we want to say the view AFTER update,
a client should include all the version written by itself.

We correct typos.
