1
00:00:00,740 --> 00:00:01,740
I am Shale.

2
00:00:01,740 --> 00:00:04,730
I am presenting our work on consistency models in databases.

3
00:00:04,730 --> 00:00:09,690
This is a jointed work with Andrea, Azalea and Philippa.

4
00:00:09,690 --> 00:00:13,650
Consistency models in distributed key-value stores are hard to understand.

5
00:00:13,650 --> 00:00:16,150
There are many proposals of consistency model definitions.

6
00:00:16,150 --> 00:00:20,179
For example, there are well-known general axiomatic definitions,

7
00:00:20,179 --> 00:00:24,980
which put constraints on the shape of graph-based states.

8
00:00:24,980 --> 00:00:26,939
Other trace-based semantics

9
00:00:26,939 --> 00:00:31,669
defines consistency models as properties over the entire traces.

10
00:00:31,669 --> 00:00:34,840
Last, there are many reference implementations

11
00:00:34,840 --> 00:00:40,360
and reference operational semantics for specific consistency models.

12
00:00:40,360 --> 00:00:43,640
We proposed an interleaving operational semantics

13
00:00:43,640 --> 00:00:47,000
that can be parametrised by consistency models.

14
00:00:47,000 --> 00:00:52,650
Specifically, we focus on consistency models in distributed key-value stores.

15
00:00:52,650 --> 00:00:59,160
We show that our definitions are correct with respect to axiomatic definitions.

16
00:00:59,160 --> 00:01:01,650
Because of the operational features, we believe that

17
00:01:01,650 --> 00:01:05,560
our semantics can be an interface for

18
00:01:05,560 --> 00:01:09,189
verifying implementations of distributed key-values stores

19
00:01:09,189 --> 00:01:12,970
and reasoning client programs.

20
00:01:12,970 --> 00:01:18,859
The internal structure and state of a distributed system can be very complicated,

21
00:01:18,859 --> 00:01:24,140
for example, common structures including replicated database or sharded database.

22
00:01:24,140 --> 00:01:26,789
Those databases often allowed weak behaviours

23
00:01:26,789 --> 00:01:30,299
because of temporarily out of synchronisation.

24
00:01:30,299 --> 00:01:34,460
Yet, these details are not important to the users.

25
00:01:34,460 --> 00:01:38,729
In our semantics, we use a global key-value store,

26
00:01:38,729 --> 00:01:45,119
or a kv-store, to abstract the state of a distributed store.

27
00:01:45,119 --> 00:01:52,359
Each key in a kv-store is associated with a list of abstract versions.

28
00:01:52,359 --> 00:01:57,560
Particularly, each abstract version contains a value.

29
00:01:57,560 --> 00:02:00,209
the writer who committed this value

30
00:02:00,209 --> 00:02:03,219
and a set of readers.

31
00:02:03,219 --> 00:02:09,280
A client of a distributed kv-store may not observe the entire global state.

32
00:02:09,280 --> 00:02:13,040
For example, this client may only observe state from one replica.

33
00:02:13,040 --> 00:02:15,830
We model this through a notion of client view,

34
00:02:15,830 --> 00:02:21,420
which only contains partial information over the global kv-store.

35
00:02:21,420 --> 00:02:24,200
We propose a standard interleaving semantics.

36
00:02:24,200 --> 00:02:28,820
Our semantics is parameterised by a notion of execution test, ET.

37
00:02:28,820 --> 00:02:33,280
It checks if a client is allowed to commit a transaction.

38
00:02:33,280 --> 00:02:35,570
In our semantics, the notion of client view

39
00:02:35,570 --> 00:02:39,980
helps us to reduce a transaction in one abstract step

40
00:02:39,980 --> 00:02:45,370
instead of several small steps with fine-grained interleaving.

41
00:02:45,370 --> 00:02:49,260
The key rule in our semantics is atomic transaction rule,

42
00:02:49,260 --> 00:02:52,040
which describes how a client commits a transaction.

43
00:02:52,040 --> 00:02:57,320
We will explain it in the following slides.

44
00:02:57,320 --> 00:03:02,640
Each view corresponds to a local snapshot, which is a simple, plain key-value store.

45
00:03:02,640 --> 00:03:05,980
It is the initial state for a transaction,

46
00:03:05,980 --> 00:03:11,790
and the transaction will read from or write to the local snapshot before commit.

47
00:03:11,790 --> 00:03:13,510
Here we make our first assumption,

48
00:03:13,510 --> 00:03:18,210
the snapshot includes the latest observable versions.

49
00:03:18,210 --> 00:03:21,870
This corresponds to the last-write-win resolution policy,

50
00:03:21,870 --> 00:03:26,720
which has been used in many distributed key-value stores.

51
00:03:26,720 --> 00:03:30,330
The semantics for executing commands of a transaction is straightforward

52
00:03:30,330 --> 00:03:33,510
since it is local to the transaction.

53
00:03:33,510 --> 00:03:39,610
To track the effect of a transaction, we collect a fingerprint, that is, a read-write set.

54
00:03:39,610 --> 00:03:44,250
Note that we focus on consistency models that satisfy snapshot property

55
00:03:44,250 --> 00:03:46,690
also known as atomic visibility.

56
00:03:46,690 --> 00:03:52,380
Hence, the fingerprint only tracks the first read before any write per key,

57
00:03:52,380 --> 00:03:55,320
and the last write per key.

58
00:03:55,320 --> 00:04:00,390
In our increment example, the final fingerprint contains two operations,

59
00:04:00,390 --> 00:04:05,180
write 2 to key, k, and read 1 from key, k.

60
00:04:05,180 --> 00:04:09,320
Now the client wants to commit the fingerprint to the kv-store.

61
00:04:09,320 --> 00:04:12,810
But before that, we need to check if it is allowed.

62
00:04:12,810 --> 00:04:19,099
We use a can-commit predicate to check, given a kv-store K and a view u,

63
00:04:19,099 --> 00:04:24,400
if a fingerprint is allowed to commit under an execution test ET.

64
00:04:24,400 --> 00:04:28,710
Recall that an execution test corresponds to a consistency model.

65
00:04:28,710 --> 00:04:31,389
We will explain the execution test later.

66
00:04:31,389 --> 00:04:35,370
Let assume that the check passes for now.

67
00:04:35,370 --> 00:04:36,370
If the check passes.

68
00:04:36,370 --> 00:04:38,330
We are ready to commit the fingerprint.

69
00:04:38,330 --> 00:04:43,639
We pick a fresh transaction ID, for example t3.

70
00:04:43,639 --> 00:04:47,090
For any write in the fingerprint, it appends a new version

71
00:04:47,090 --> 00:04:51,370
with the writer to be the new transaction ID.

72
00:04:51,370 --> 00:04:55,569
For read, it adds the transaction ID to the reader set.

73
00:04:55,569 --> 00:04:58,020
However, we have not done yet.

74
00:04:58,020 --> 00:05:01,669
We still need to decide a new view for the client.

75
00:05:01,669 --> 00:05:06,169
Note that this new view will affect future transactions.

76
00:05:06,169 --> 00:05:07,971
It is done thought a view-shift predicate

77
00:05:07,971 --> 00:05:12,560
that is also parameterised by an execution test ET.

78
00:05:12,560 --> 00:05:18,340
For example, the predicate here says the new view, uâ€™, must contain all versions

79
00:05:18,340 --> 00:05:24,169
included in the old view, u, and any new versions written by the transaction,

80
00:05:24,169 --> 00:05:27,259
for example the last version here.

81
00:05:27,259 --> 00:05:32,360
Note that all the steps I just described is one big rule in our semantics

82
00:05:32,360 --> 00:05:34,800
called atomic transaction rule.

83
00:05:34,800 --> 00:05:39,659
Other rules such as sequential composition are as expected.

84
00:05:39,659 --> 00:05:42,999
In the atomic transaction rule, we mentioned two predicates,

85
00:05:42,999 --> 00:05:44,469
can-commit and view-shift.

86
00:05:44,469 --> 00:05:47,840
Both are parametrised by an execution test ET.

87
00:05:47,840 --> 00:05:52,469
We use these two predicates to specify many well-known consistency models,

88
00:05:52,469 --> 00:05:58,590
for example, causal consistency, snapshot isolation and parallel snapshot isolation.

89
00:05:58,590 --> 00:06:01,999
Can-commit determines that given a view, u,

90
00:06:01,999 --> 00:06:06,779
if the fingerprint, F, of a transaction is allowed to commit to the kv-store, K.

91
00:06:06,779 --> 00:06:11,800
We will use the running example to explain the can-commit.

92
00:06:11,800 --> 00:06:18,409
View-shift determines the post-view of the client after committing a transaction.

93
00:06:18,409 --> 00:06:20,039
View-shift is easier to understand.

94
00:06:20,039 --> 00:06:21,710
It often says something like

95
00:06:21,710 --> 00:06:27,300
the post-view must include all versions previously observed by the same client

96
00:06:27,300 --> 00:06:30,949
or versions written by the same client.

97
00:06:30,949 --> 00:06:33,490
To explain can-commit, first,

98
00:06:33,490 --> 00:06:39,059
we need to introduce some relations between transaction identifiers in the kv-store.

99
00:06:39,059 --> 00:06:41,849
We have write-write, WW,

100
00:06:41,849 --> 00:06:46,467
saying that one transaction commits a newer version on the same key

101
00:06:46,467 --> 00:06:48,479
 after another transaction.

102
00:06:48,479 --> 00:06:54,680
Write-read, WR, says that a transaction directly reads from

103
00:06:54,680 --> 00:06:57,499
the version written by another transaction.

104
00:06:57,499 --> 00:07:00,069
Read-write, RW,

105
00:07:00,069 --> 00:07:05,949
says that a transaction reads a version being overwritten by another translation.

106
00:07:05,949 --> 00:07:10,309
Last, we have session order, which is the commit order of

107
00:07:10,309 --> 00:07:14,650
transactions from the same client.

108
00:07:14,650 --> 00:07:18,270
Can-commit is defined as closure property against a relation, R,

109
00:07:18,270 --> 00:07:21,710
which will be a combination of the four relations I just introduced.

110
00:07:21,710 --> 00:07:24,800
Here, we take causal consistency as an example

111
00:07:24,800 --> 00:07:28,680
to show what we mean by a view is closed.

112
00:07:28,680 --> 00:07:31,569
Assume the kv-store, K, we saw before.

113
00:07:31,569 --> 00:07:36,789
Assume another client whose view only contains the first and last versions.

114
00:07:36,789 --> 00:07:38,819
Causal consistency requires that

115
00:07:38,819 --> 00:07:45,569
view is closed with respect to session order union write-read.

116
00:07:45,569 --> 00:07:49,309
In the kv-store, we observe that there is a write-read edge

117
00:07:49,309 --> 00:07:53,550
from transaction t1 to transaction t2.

118
00:07:53,550 --> 00:07:54,789
The closure requires that

119
00:07:54,789 --> 00:07:59,849
(1) if a view includes a version written by a transaction, for example, t2 here,

120
00:07:59,849 --> 00:08:05,349
(2) if there is another transaction related to t2 with respect to the relation,

121
00:08:05,349 --> 00:08:06,689
for example t1 here.

122
00:08:06,689 --> 00:08:14,210
Then the view also needs to include all versions written by transaction t1.

123
00:08:14,210 --> 00:08:19,860
Here the view needs to include the second version specifically.

124
00:08:19,860 --> 00:08:23,809
If the client also includes the second version, we have a view that is closed

125
00:08:23,809 --> 00:08:28,580
with respect to session order union write-read,

126
00:08:28,580 --> 00:08:32,959
which corresponds to causal consistency.

127
00:08:32,959 --> 00:08:37,149
Here is a table of all consistency models we have covered in the paper,

128
00:08:37,149 --> 00:08:41,960
including causal consistency, CC, parallel snapshot isolation PSI,

129
00:08:41,960 --> 00:08:49,040
snapshot isolation SI and serialisibility SER.

130
00:08:49,040 --> 00:08:50,529
To justify our semantics

131
00:08:50,529 --> 00:08:55,500
and particularly definitions of consistency models using execution tests.

132
00:08:55,500 --> 00:08:59,860
We prove our operational definitions of consistency models is equivalent to

133
00:08:59,860 --> 00:09:04,740
the well-known graph-based axiomatic definitions on abstract executions.

134
00:09:04,740 --> 00:09:07,680
We prove it by trace equivalent.

135
00:09:07,680 --> 00:09:08,680
The challenge here is that

136
00:09:08,680 --> 00:09:14,240
abstract execution maintains a total commit order over all transactions,

137
00:09:14,240 --> 00:09:20,149
while in our kv-store we only have a partial order over versions per key.

138
00:09:20,149 --> 00:09:22,540
In abstract execution,

139
00:09:22,540 --> 00:09:27,459
they define consistency models as constraints on visibility edges.

140
00:09:27,459 --> 00:09:30,639
For each consistency model, we show an equivalent relation

141
00:09:30,639 --> 00:09:37,160
between execution test, ET and constraints on visibility edges.

142
00:09:37,160 --> 00:09:40,060
We then plug the relation into constructors,

143
00:09:40,060 --> 00:09:44,089
which lifts the equivalent relation to single-step level,

144
00:09:44,089 --> 00:09:49,470
that is, given an equivalent kv-store K and abstract execution X,

145
00:09:49,470 --> 00:09:56,440
after one step, the result Kâ€™ and Xâ€™ are still equivalent.

146
00:09:56,440 --> 00:10:01,130
The notion of equivalence between K and X means

147
00:10:01,130 --> 00:10:04,940
they contain the same information.

148
00:10:04,940 --> 00:10:09,000
Given the single-step equivalence, we can easily lift them into

149
00:10:09,000 --> 00:10:13,930
an equivalent relation between traces.

150
00:10:13,930 --> 00:10:19,130
Given our semantics, we have two applications.

151
00:10:19,130 --> 00:10:22,480
One is to verify implementation by trace refinement.

152
00:10:22,480 --> 00:10:25,639
We show how to do that for a particular replicated database

153
00:10:25,639 --> 00:10:28,250
and a particular sharded database.

154
00:10:28,250 --> 00:10:32,500
The challenge is to link the synchronisation mechanism in the implementations

155
00:10:32,500 --> 00:10:36,079
to the view and closure mechanism in our semantics.

156
00:10:36,079 --> 00:10:40,329
We also show how to use our semantics to reason about client programs,

157
00:10:40,329 --> 00:10:45,950
by proving the invariant properties of reachable states of the client programs.

158
00:10:45,950 --> 00:10:47,190
For example we can prove robustness.

159
00:10:47,190 --> 00:10:51,480
Robustness can be done also in other semantics.

160
00:10:51,480 --> 00:10:55,440
Here we provide a state-based invariant that implies robustness.

161
00:10:55,440 --> 00:11:00,720
Second, we prove the mutual exclusion property of a lock program.

162
00:11:00,720 --> 00:11:05,160
This property may be difficult to achieve in other graph-based semantics,

163
00:11:05,160 --> 00:11:08,329
since they need to recover state from the graph.

164
00:11:08,329 --> 00:11:14,580
While it is relatively easier to prove in  our semantics.

165
00:11:14,580 --> 00:11:18,057
To conclude, we propose an interleaving operational semantics

166
00:11:18,057 --> 00:11:21,620
which can be parametrised by consistency models.

167
00:11:21,620 --> 00:11:23,654
We use global abstract kv-stores 

168
00:11:23,654 --> 00:11:28,870
to represent the detail states of distributed key-value stores.

169
00:11:28,870 --> 00:11:32,248
This representation contains enough information

170
00:11:32,248 --> 00:11:36,930
to allow us to specify many well-known consistency models.

171
00:11:36,930 --> 00:11:42,390
We use views to represent the observable states of individual clients.

172
00:11:42,390 --> 00:11:45,180
It also plays the key role in our semantics:

173
00:11:45,180 --> 00:11:50,586
First, it allows us to have a standard interleaving operational semantics 

174
00:11:50,586 --> 00:11:55,550
on the level of transaction as an atomic step.

175
00:11:55,550 --> 00:12:01,517
Second, it allows to model many weak consistency models.

176
00:12:01,517 --> 00:12:07,410
Then we propose execution tests as operational definitions of consistency models.

177
00:12:07,410 --> 00:12:13,060
We give many examples, including causal consistency and snapshot isolation.

178
00:12:13,060 --> 00:12:16,367
We show that these operational definitions are equivalent

179
00:12:16,367 --> 00:12:19,399
to the well-known axiomatic definitions.

180
00:12:19,399 --> 00:12:22,534
All the trace-equivalent proofs are non-trivial

181
00:12:22,534 --> 00:12:26,534
but we provide several levels of general constructors,

182
00:12:26,550 --> 00:12:30,254
so we only need to focus on the equivalent relation

183
00:12:30,254 --> 00:12:36,100
between execution tests and visibility constraints.

184
00:12:36,100 --> 00:12:39,367
Our semantics can be an interface for verifying implementation 

185
00:12:39,367 --> 00:12:42,389
and reasoning client programs.

186
00:12:42,389 --> 00:12:45,167
Although our semantics is very abstract,

187
00:12:45,167 --> 00:12:49,199
we still manage to prove two implementation protocols.

188
00:12:49,199 --> 00:12:51,489
The biggest strength of our semantics is that

189
00:12:51,489 --> 00:12:55,819
it is state-based with interleaving on transaction level.

190
00:12:55,819 --> 00:12:59,850
This is how most programmers think of the interaction to a key-value store.

191
00:12:59,850 --> 00:13:02,507
In our second application, we show that 

192
00:13:02,507 --> 00:13:08,160
our semantics can prove state-based invariant properties of client programs.

193
00:13:08,160 --> 00:13:11,310
In the future, it will be nice to first mechanise  our semantics

194
00:13:11,310 --> 00:13:15,660
and build an engine that actually executes our semantics.

195
00:13:15,660 --> 00:13:21,079
With the engine, it is possible to generate litmus tests for implementation,

196
00:13:21,079 --> 00:13:23,920
and to build a model checker for client reasoning.

