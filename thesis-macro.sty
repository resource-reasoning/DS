%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dependency 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% xparse for more powerful macro definition,
% NewDocumentCommand and NewDocumentEnvironment
\RequirePackage{xparse}
% string filter 
\RequirePackage{xstring}
% list parser, e.g. \readlist 
\RequirePackage{listofitems}
% for newenviron
\RequirePackage{environ}

% Honey, mathtool is dark magic after xparse
\RequirePackage{mathtools}

% for xspace
\RequirePackage{xspace}

% math symbol, e.g. triangle equal
% math envrioment, e.g. align
\RequirePackage{amssymb, amsmath}

% for stackrel: put word above math operator
\RequirePackage{stackrel}

% for special brackets
\RequirePackage{stmaryrd}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% always start with capital letter 
% We heavily use | as separators
% We heavily use () as optional parameters instead of {}
% Most macro has star version, which stop the bracket stretching or stop certain font setting

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Fonts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
\NewDocumentCommand\RuleFont{m}{\textsc{#1}}
\NewDocumentCommand\MataTypeFont{m}{\textsf{#1}}
\NewDocumentCommand\TypeFont{m}{\protect\scalebox{0.9}{\textsc{#1}}}
\NewDocumentCommand\CodeFont{m}{\ensuremath{\mathtt{#1}}\xspace}
\NewDocumentCommand\CommentFont{m}{\ensuremath{\mathtt{#1}}\xspace}
\NewDocumentCommand\FunctionFont{m}{\ensuremath{\mathsf{#1}}\xspace}
\NewDocumentCommand\PredicateFont{m}{\ensuremath{\mathtt{#1}}\xspace}
\NewDocumentCommand\RelationFont{m}{\ensuremath{\mathsf{\uppercase{#1}}}\xspace}
\NewDocumentCommand\LogicFont{m}{\textsc{\lowercase{#1}}\xspace}
\NewDocumentCommand\MathAuxiliaryFont{m}{%
\mathclap{\mathit{\scriptsize\lowercase{#1}}}\xspace%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Short hands
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NewDocumentCommand\Th{m}{\ensuremath{#1}\textsuperscript{th}\xspace}
\NewDocumentCommand\ow{}{\ensuremath{\text{otherwise}}\xspace}
\NewDocumentCommand\If{}{\ensuremath{\text{if}\ }\xspace}
\NewDocumentCommand\Undef{}{\ensuremath{\text{undefined}}\xspace}
\NewDocumentCommand\Case{m}{\item \textbf{Case}\xspace #1.\xspace}
\NewDocumentCommand\Cases{m}{\item \textbf{Cases}\xspace #1.\xspace}
\NewDocumentCommand\CaseBase{m}{\item \textbf{Base Case}\xspace #1.\xspace}
\NewDocumentCommand\CaseInd{m}{\item \textbf{Inductive Case}\xspace #1.\xspace}
\NewDocumentCommand\Let{}{\ensuremath{\CodeFont{let}\ }\xspace}
\NewDocumentCommand\LetQuad{}{\ensuremath{\phantom{\CodeFont{let}}\ }\xspace}
\NewDocumentCommand\In{}{\ensuremath{\CodeFont{in}\ }\xspace}
\NewDocumentCommand\AND{}{\ensuremath{\CodeFont{and}\ }\xspace}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Formulae typesetting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% a wrap for environment amsmath,
% bypass a compatibility issune for xparse
\NewEnviron{ALIGNS}{\begin{align*}\BODY\end{align*}}

% automatic put array for multi-lines formulae
\NewDocumentCommand{\OPTIONMULTLINE}{m}{
% set separate 
\noexpandarg%
% check if there are multiple lines
\IfSubStr{#1}{\\}{\begin{multlined}#1\end{multlined}}{#1}%
}

% Prefix + extracts multi-lines.
% It put stretchable brackets around a single formula,
% or multline environment then brackets for multi-lines formulae, identified via `\\'
%\NewDocumentEnvironment{Bracketed}{ s +b }{%
%% stop argument expansion for checking \\
%\IfBooleanTF{#1}{(}{\left(}%
%% check if there are multiple lines
%\OPTIONMULTLINE{#2}%
%}{%
%\IfBooleanTF{#1}{)}{\right)}%
%}

% wrap for multlined
%\NewDocumentEnvironment{Formula}{b}{\multlined #1}{\endmultlined}

% multiple lines formulae with or without label,
% label align to the bottom
%\NewDocumentEnvironment{Formulae}{ s +b }{%
%\mathtoolsset{multlined-pos=b}%
%% replcae the \label with LABEL
%%\def\REPLACELABEL{\StrSubstitute{#2}{\label}{LABEL}}
%\IfBooleanTF{#1}{\ALIGNS}{\align}%
%#2%
%}{%
%\IfBooleanTF{#1}{\endALIGNS}{\endalign}%
%\mathtoolsset{multlined-pos=t}%
%}

%\NewDocumentEnvironment{Centermultline}{ s +b }{%
%\IfBooleanTF{#1}{\GATHERS}{\GATHER}%
%\OPTIONMULTLINE{#2}%
%}{%
%\IfBooleanTF{#1}{\endGATHERS}{\endGATHER}%
%}

%\NewDocumentEnvironment{Centermultline*}{ +b }{%
%\GATHERS%
%\OPTIONMULTLINE{#1}%
%}{%
%\endGATHERS%
%}

% reduction steps arrow, padding
\NewDocumentCommand\ArrowPadding{m}{\ensuremath{\;\mathrel{#1}\;}\xspace}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Mathematics structures and operators, 
% e.g. function, predicate, set, list, etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%
% Variable and types
%%%%%%%%%%%

\NewDocumentCommand\TypeDef{}{%
\ensuremath{\stackrel{\MathAuxiliaryFont{def}}{=}}\xspace%
}
\NewDocumentCommand\IsTyped{}{%
\ensuremath{\mathrel{:}}\xspace%
}

% lift variable into set, ie upper-case
\NewDocumentCommand\MathVar{m}{\ensuremath{#1}\xspace}

% lift variable into set, ie upper-case
\NewDocumentCommand\SetOf{m}{\ensuremath{\uppercase{#1}}\xspace}

% lift variable into set of set, ie curly upper-case
\NewDocumentCommand\SetSetOf{m}{\ensuremath{\mathcal{\SetOf{#1}}}\xspace}

% nature number, integer, index
\NewDocumentCommand\Int{}{\ensuremath{\mathbb{Z}}\xspace}
\NewDocumentCommand\Index{}{\ensuremath{\mathbb{N}}\xspace}

%%%%%%%%%%%
% Redefine implies and iff with shorter arrows
%%%%%%%%%%%
\RenewDocumentCommand\implies{}{\Rightarrow}
\RenewDocumentCommand\iff{}{\Leftrightarrow}
% provide \centernot
\RequirePackage{centernot}
%\RenewDocumentCommand\not{m}{\centernot{#1}}

%%%%%%%%%%%
% Set 
%%%%%%%%%%%
% depending on the second argument #2,
% if it is concrete value then it produce a stretchable bar | in between.
\NewDocumentCommand\OPTIONSET{mm}{%
\left\{%
\OPTIONMULTLINE{#1}%
\IfValueT{#2}{%
\; \middle| \; \OPTIONMULTLINE{#2}%
}%
\right\}%
}

\NewDocumentCommand\OPTIONSETS{mm}{%
\ensuremath{%
\{%
\OPTIONMULTLINE{#1}%
\IfValueT{#2}{%
\ \mid \ \OPTIONMULTLINE{#2}%
}\}}\xspace%
}

% A set with | as the separator.
% It should have maximum one |.
\NewDocumentCommand\SetBAR{ s >{\SplitArgument{1}{|}} m}{%
\IfBooleanTF{#1}{\ensuremath{ \OPTIONSETS #2 }%
}{\ensuremath{\OPTIONSET #2}}}

\NewDocumentCommand\Set{ s m o}{%
\IfBooleanTF{#1}{
\IfValueTF{#3}{\ensuremath{ \OPTIONSETS{#2}{#3}}}{\SetBAR*{#2}}%
}{
\IfValueTF{#3}{\ensuremath{ \OPTIONSET{#2}{#3}}}{\SetBAR{#2}}%
}\xspace}

%%%%%%%%%%%
% List 
%%%%%%%%%%%
% List concatenation
\NewDocumentCommand\ListConcat{}{\ensuremath{\mathbin{::}}\xspace}

% A list of several segments separated by | and connected by \ListConcat.
\NewDocumentCommand\List{s m}{%
\ensuremath{%
\setsepchar{{|}}%
\readlist*\listElems{#2}%
\foreachitem\listElem\in\listElems{%
\IfBooleanTF{#1}{[}{\left[}%
\OPTIONMULTLINE{\listElem}%
\IfBooleanTF{#1}{]}{\right]}%
\ifnum\listElemcnt<\listElemslen%
\ListConcat%
\fi%
}}\xspace%
}

%%%%%%%%%%%
% Tuple 
%%%%%%%%%%%
% A tuple 
\NewDocumentCommand\Tuple{s m}{%
\ensuremath{%
%cut the element by comma `,'
\IfBooleanTF{#1}{\left(}{\left(}%
\OPTIONMULTLINE{#2}%
\right)
}\xspace%
}


%%%%%%%%%%%
% Function  and mapping
%%%%%%%%%%%
% function definition, 
\NewDocumentCommand\FuncDef{}{%
\ensuremath{\stackrel{\MathAuxiliaryFont{def}}{=}}\xspace%
}

% A function followed by a list of parameter groups.
% Each group is  separated by | and wrapped with stretchable brackets
% The non-star version applies \FuncFont to the function name,
% while the star version does not.
\NewDocumentCommand\Func{s m d()}{%
\ensuremath{%
\IfBooleanTF{#1}{#2}{\FunctionFont{#2}}%
\IfNoValueTF{#3}{}{%
\setsepchar{{|}}%
\readlist*\argumentElems{#3}%
\foreachitem\argumentElem\in\argumentElems{%
\Tuple{\argumentElem}%
}}}\xspace%
}

% function arrows: total, partial, total finite, and partial finite
\NewDocumentCommand\ToTFunc{}{\ensuremath{\rightarrow}\xspace}
\NewDocumentCommand\ToPFunc{}{\ensuremath{\xrightharpoonup{}}\xspace}
\NewDocumentCommand\ToTFFunc{}{%
\ensuremath{\xrightarrow{\MathAuxiliaryFont{fin}}}\xspace}
\NewDocumentCommand\ToPFFunc{}{%
\ensuremath{\xrightharpoonup{\MathAuxiliaryFont{fin}}}\xspace}

% map to
\NewDocumentCommand\MapTo{mm}{%
\ensuremath{#1 \mapsto #2}\xspace%
}

% a single mapping split by `->' as the arrow
\NewDocumentCommand\SINGLEMAP{m}{%
\ensuremath{%
\setsepchar{{->}}%
\readlist*\singlemappingElems{#1}%
\ifnum\singlemappingElemslen=1
\MapTo{\singlemappingElems[1]}{-NoValue-}%
\else%
\MapTo{\singlemappingElems[1]}{\singlemappingElems[2]}%
\fi%
}}

\NewDocumentCommand\Mapping{s m}{%
\noexpandarg
\ensuremath{%
\IfBooleanTF{#1}{\Set*}{\Set}%
{%
\setsepchar{{|}}%
\readlist*\mappingElems{#2}%
\foreachitem\mappingElem\in\mappingElems{%
\SINGLEMAP{\mappingElem}%
% put comma in between
\ifnum\mappingElemcnt<\mappingElemslen,\fi%
}}}\xspace%
}

% update function in the form [d -> r][d' -> r'].
% Split by `|'
\NewDocumentCommand\UpdateFunc{m}{%
\ensuremath{%
\noexpandarg%
\setsepchar{{|}}%
\readlist*\mappingElems{#1}%
\foreachitem\mappingElem\in\mappingElems{%
\left[\SINGLEMAP{\mappingElem}\right]%
}}\xspace%
}

%%%%%%%%%%%
% Predicate 
%%%%%%%%%%%
% predicate definition
\NewDocumentCommand\PredDef{}{\ensuremath{\stackrel{\MathAuxiliaryFont{def}}{\iff}}\xspace}

% A predicate followed by a list of parameter groups.
% Each group is  separated by | and wrapped with stretchable brackets
% The non-star version applies \PredicateFont to the function name,
% while the star version does not.
\NewDocumentCommand\Pred{s m d()}{%
\ensuremath{%
\IfBooleanTF{#1}{#2}{\PredicateFont{#2}}%
\IfNoValueTF{#3}{}{%
\setsepchar{{|}}%
\readlist*\argumentElems{#3}%
\foreachitem\argumentElem\in\argumentElems{%
\Tuple{\argumentElem}%
}}}\xspace%
}

%%%%%%%%%%%
% Quantification 
%%%%%%%%%%%

% for-all and exists, split by `|'
\NewDocumentCommand\Forall{m}{%
\ensuremath{%
\setsepchar{{|}}%
\readlist*\quantificationElems{#1}%
\foreachitem\quantificationElem\in\quantificationElems{%
\forall \quantificationElem \ldotp%
}}\xspace%
}

\NewDocumentCommand\Exists{m}{%
\ensuremath{%
\setsepchar{{|}}%
\readlist*\quantificationElems{#1}%
\foreachitem\quantificationElem\in\quantificationElems{%
\exists \quantificationElem \ldotp%
}}\xspace%
}

%%%%%%%%%%%
% Unary operator
%%%%%%%%%%%

% Power set 
\NewDocumentCommand\PowerSet{d()}{%
\ensuremath{\mathcal{P}(#1)}\xspace%
}

% Projection
\NewDocumentCommand\Proj{o m}{%
\ensuremath{%
\IfNoValueTF{#1}{}{{#1}}_{\left| #2 \right.}%
}\xspace%
}

% Absolute value
\NewDocumentCommand\Abs{m}{\ensuremath{\left| #1 \right|}\xspace}

% Domain and range
\NewDocumentCommand\Dom{d()}{\ensuremath{\Func{Dom}(#1)}\xspace}
\NewDocumentCommand\Range{d()}{\ensuremath{\Func{Range}(#1)}\xspace}
% max and min
\NewDocumentCommand\Max{O{}d()}{\ensuremath{\Func*{\FunctionFont{Max}_{#1}}(#2)}\xspace}
\NewDocumentCommand\Min{O{}d()}{\ensuremath{\Func*{\FunctionFont{Min}_{#1}}(#2)}\xspace}
% relation closure
\NewDocumentCommand\TraRe{d()}{%
\IfNoValueTF{#1}{%
\MathVar{\mathop{{}^*}}%
}{\MathVar{{#1}^*}%
}}
\NewDocumentCommand\Refl{d()}{%
\IfNoValueTF{#1}{%
\MathVar{\mathop{{}^?}}%
}{\MathVar{{#1}^?}%
}}
\NewDocumentCommand\Trasi{d()}{%
\IfNoValueTF{#1}{%
\MathVar{\mathop{{}^+}}%
}{\MathVar{{#1}^+}%
}}
\NewDocumentCommand\Inv{d()}{%
\IfNoValueTF{#1}{%
\MathVar{\mathop{{}^{-1}}}%
}{\MathVar{{#1}^{-1}}%
}}
\NewDocumentCommand\RelConcat{}{\ensuremath{\mathbin{;}}\xspace}
% Denotation
\NewDocumentCommand\Denote{m O{}}{%
\ensuremath{\left\llbracket #1 \right\rrbracket_{#2}}\xspace%
}
